/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MemoizationImport } from './routes/memoization'
import { Route as DogsImport } from './routes/dogs'
import { Route as ComponentBuildingImport } from './routes/componentBuilding'
import { Route as DogsIndexImport } from './routes/dogs/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const MemoizationRoute = MemoizationImport.update({
  id: '/memoization',
  path: '/memoization',
  getParentRoute: () => rootRoute,
} as any)

const DogsRoute = DogsImport.update({
  id: '/dogs',
  path: '/dogs',
  getParentRoute: () => rootRoute,
} as any)

const ComponentBuildingRoute = ComponentBuildingImport.update({
  id: '/componentBuilding',
  path: '/componentBuilding',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const DogsIndexRoute = DogsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DogsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/componentBuilding': {
      id: '/componentBuilding'
      path: '/componentBuilding'
      fullPath: '/componentBuilding'
      preLoaderRoute: typeof ComponentBuildingImport
      parentRoute: typeof rootRoute
    }
    '/dogs': {
      id: '/dogs'
      path: '/dogs'
      fullPath: '/dogs'
      preLoaderRoute: typeof DogsImport
      parentRoute: typeof rootRoute
    }
    '/memoization': {
      id: '/memoization'
      path: '/memoization'
      fullPath: '/memoization'
      preLoaderRoute: typeof MemoizationImport
      parentRoute: typeof rootRoute
    }
    '/dogs/': {
      id: '/dogs/'
      path: '/'
      fullPath: '/dogs/'
      preLoaderRoute: typeof DogsIndexImport
      parentRoute: typeof DogsImport
    }
  }
}

// Create and export the route tree

interface DogsRouteChildren {
  DogsIndexRoute: typeof DogsIndexRoute
}

const DogsRouteChildren: DogsRouteChildren = {
  DogsIndexRoute: DogsIndexRoute,
}

const DogsRouteWithChildren = DogsRoute._addFileChildren(DogsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/componentBuilding': typeof ComponentBuildingRoute
  '/dogs': typeof DogsRouteWithChildren
  '/memoization': typeof MemoizationRoute
  '/dogs/': typeof DogsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/componentBuilding': typeof ComponentBuildingRoute
  '/memoization': typeof MemoizationRoute
  '/dogs': typeof DogsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/componentBuilding': typeof ComponentBuildingRoute
  '/dogs': typeof DogsRouteWithChildren
  '/memoization': typeof MemoizationRoute
  '/dogs/': typeof DogsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/componentBuilding' | '/dogs' | '/memoization' | '/dogs/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/componentBuilding' | '/memoization' | '/dogs'
  id:
    | '__root__'
    | '/'
    | '/componentBuilding'
    | '/dogs'
    | '/memoization'
    | '/dogs/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ComponentBuildingRoute: typeof ComponentBuildingRoute
  DogsRoute: typeof DogsRouteWithChildren
  MemoizationRoute: typeof MemoizationRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ComponentBuildingRoute: ComponentBuildingRoute,
  DogsRoute: DogsRouteWithChildren,
  MemoizationRoute: MemoizationRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/componentBuilding",
        "/dogs",
        "/memoization"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/componentBuilding": {
      "filePath": "componentBuilding.tsx"
    },
    "/dogs": {
      "filePath": "dogs.tsx",
      "children": [
        "/dogs/"
      ]
    },
    "/memoization": {
      "filePath": "memoization.tsx"
    },
    "/dogs/": {
      "filePath": "dogs/index.tsx",
      "parent": "/dogs"
    }
  }
}
ROUTE_MANIFEST_END */
